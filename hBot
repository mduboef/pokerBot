from pypokerengine.players import BasePokerPlayer
import random

class hBot(BasePokerPlayer):
    def __init__(self):
        # map card ranks to numeric values
        self.card_strength = {
            '2': 2, '3': 3, '4': 4, '5': 5, '6': 6,
            '7': 7, '8': 8, '9': 9, 'T': 10,
            'J': 11, 'Q': 12, 'K': 13, 'A': 14
        }

    def declare_action(self, valid_actions, hole_card, round_state):
        # community_cards are the shared cards on the table
        community_cards = round_state['community_card']

        # find our bot's stack by matching its UUID
        # my_stack is the number of our bot's chips
        my_stack = next(player['stack'] for player in round_state['seats'] if player['uuid'] == self.uuid)

        # estimate the strength of our current hand (hole cards + community cards)
        # uses a helper function defined later
        hand_strength = self.evaluate_hand(hole_card, community_cards)

        # check if raising is allowed
        can_raise = any(action['action'] == 'raise' for action in valid_actions)

        # find information about calling, including how much we must pay to stay in
        call_info = next((action for action in valid_actions if action['action'] == 'call'), None)
        call_amount = 0
        if call_info and 'amount' in call_info:
            # call_amount is the amount needed to call
            call_amount = call_info['amount']

        # set an aggression factor based on how big our stack is
        # it starts at 0.5 and increases up to 1.0, so it encourages riskier play with more chips
        aggression_factor = 0.5 + min(my_stack / 20000, 0.5)

        # the following lines of code use hand strength and aggression to decide what action to take
        if hand_strength >= 7:
            # this is a strong hand, so raise if possible and call otherwise
            if can_raise:
                return 'raise'
            return 'call'

        elif hand_strength >= 5: 
            # this is a medium strength hand, so sometimes raise based on aggression, call or fold otherwise
            if random.random() < aggression_factor:
                return 'raise' if can_raise else 'call'
                #  if calling is relatively cheap, then call, fold otherwise
            return 'call' if call_amount <= my_stack * 0.2 else 'fold'

        elif hand_strength >= 3:  
            # this is a weak hand so rarely bluff, call if cheap, or fold
            if can_raise and random.random() < aggression_factor * 0.5:
                return 'raise'
            return 'call' if call_amount <= my_stack * 0.1 else 'fold'

        else:  
            if random.random() < 0.1 and can_raise:
                # this hand is very bad so fold unless it is free to call, bluff rarely
                return 'raise'
            return 'fold' if call_amount > 0 else 'call'

    def evaluate_hand(self, hole, community):
        # combine hole and community cards into a single list
        cards = hole + community
        # extract the rank of each card and convert it to its numeric value defined previosusly 
        values = [self.card_strength[card[1]] for card in cards]
        # extract the suit of each card
        suits = [card[0] for card in cards]

        # value_count counts how many times each rank appears
        value_counts = {val: values.count(val) for val in set(values)}
        max_same_value = max(value_counts.values(), default=0)

        # check if there is a flush
        flush_possible = any(suits.count(suit) >= 5 for suit in set(suits))

        # check if there's a straight by callling a helper function defined later
        straight_possible = self.has_straight(values)

        # assign a hand strength score from 9, best to 1, worst
        if flush_possible and straight_possible:
            # straight flush
            return 9  
        if max_same_value == 4:
            # four of a kind
            return 8  
        if sorted(value_counts.values()) == [2, 3]:
            # full house
            return 7 
        if flush_possible:
            # flush, uses helper function defined above
            return 6  
        if straight_possible:
            # straight, uses helper function defined above
            return 5 
        if max_same_value == 3:
            # three of a kind
            return 4  
        if list(value_counts.values()).count(2) >= 2:
            # two pairs
            return 3  
        if max_same_value == 2:
            # one pair
            return 2  
        # high card
        return 1  

    def has_straight(self, values):
        # remove duplicates and sort the card values
        unique_values = sorted(set(values))

        # look for 5 consecutive cards
        for i in range(len(unique_values) - 4):
            if unique_values[i + 4] - unique_values[i] == 4:
                return True
        # handle low ace straight 
        return {14, 2, 3, 4, 5}.issubset(set(values))

    # --- Required callback methods ---
    def receive_game_start_message(self, game_info):
        pass

    def receive_round_start_message(self, round_count, hole_card, seats):
        pass

    def receive_street_start_message(self, street, round_state):
        pass

    def receive_game_update_message(self, new_action, round_state):
        pass

    def receive_round_result_message(self, winners, hand_info, round_state):
        pass


def setup_ai():
    return hBot()
